--Car Factory Script/GUI
--Local Variables
local humanoidrootpart = game.Players.LocalPlayer.Character.HumanoidRootPart
local player = game.Players.LocalPlayer
local player_team = player.Team.Name
local vu = game:GetService("VirtualUser")

local conveyors
local worker_count
local car
local metal_count
local glass_count
local name
local prompt
local pads
local drops

--Get Conveyors Function
local function getConveyors(conveyors)
    conveyors = {}
    for i, v in pairs(game:GetService("Workspace").Tycoons[player_team].Model.Lines:GetChildren()) do
        if v.Name ~= "Exclusive" then
            conveyors[#conveyors+1] = v
        end
    end
    return conveyors
end

function conveyorsFunc()
    while true do
        conveyors = getConveyors(conveyors)
        wait(5)
    end
end

conveyors = getConveyors(conveyors)
coroutine.wrap(conveyorsFunc)()

--Main Toggle Functions
function autoCompleteFunc()
    while wait(0.25) do
        for i, v in pairs(conveyors) do
            worker_count = 0
            for i, v in pairs(v.Conveyors:GetChildren()) do
                if v:FindFirstChild("Worker") then
                    worker_count = worker_count + 1
                end
            end
            
            car = v.Car
            if worker_count == 0 then
                --Purchase first worker
                game.ReplicatedStorage.Packages.Knit.Services.TycoonService.RF.Upgrade:InvokeServer(v.Name, "Workers")
            elseif worker_count == 1 then
                if car:FindFirstChild("Chassis") then
                    game.ReplicatedStorage.Packages.Knit.Services.TycoonService.RF.SpawnCarSegment:InvokeServer(v.Name)
                end
            elseif worker_count == 2 then
                if car:FindFirstChild("Chairs") then
                    game.ReplicatedStorage.Packages.Knit.Services.TycoonService.RF.SpawnCarSegment:InvokeServer(v.Name)
                end
            elseif worker_count == 3 then
                if car:FindFirstChild("Engine") then
                    game.ReplicatedStorage.Packages.Knit.Services.TycoonService.RF.SpawnCarSegment:InvokeServer(v.Name)
                end
            elseif worker_count == 4 then
                if car:FindFirstChild("Exterior") then
                    game.ReplicatedStorage.Packages.Knit.Services.TycoonService.RF.SpawnCarSegment:InvokeServer(v.Name)
                end
            elseif worker_count == 5 then
                if car:FindFirstChild("Windows") then
                    game.ReplicatedStorage.Packages.Knit.Services.TycoonService.RF.SpawnCarSegment:InvokeServer(v.Name)
                end
            elseif worker_count == 6 then
                print("No Skip Needed")
            end
        end
    end
end

function autoUpgradeFunc()
    while wait(1) do
        for i, v in pairs(conveyors) do
            game.ReplicatedStorage.Packages.Knit.Services.TycoonService.RF.BuyNextCar:InvokeServer(v.Name)
        end
    end
end

function autoRefillFunc()
    while wait(0.1) do
        --Get Material Count
        for i, v in pairs(conveyors) do
            metal_count = 0
            glass_count = 0
            for i, v in pairs(v.DropoffBox.Materials:GetChildren()) do
                name = v.Name
                name = name.sub(name, 0, -2)
                if name == "Metal" then
                    metal_count = metal_count + 1
                end
                if name == "Glass" then
                    glass_count = glass_count + 1
                end
            end
            
            --Fill Materials
            if metal_count < 1 then
                game.ReplicatedStorage.Packages.Knit.Services.MaterialService.RF.Collect:InvokeServer("Metal")
                game.ReplicatedStorage.Packages.Knit.Services.MaterialService.RF.Drop:InvokeServer(v)
                metal_count = metal_count + 1
            end
            
            if glass_count < 1 then
                game.ReplicatedStorage.Packages.Knit.Services.MaterialService.RF.Collect:InvokeServer("Glass")
                game.ReplicatedStorage.Packages.Knit.Services.MaterialService.RF.Drop:InvokeServer(v)
                glass_count = glass_count + 1
            end
        end
    end
end

function autoSellFunc()
    while wait(1) do
        if game:GetService("Workspace").Tycoons[player_team].Model.NPCs:FindFirstChild("BidderPrompt") then
            prompt = game:GetService("Workspace").Tycoons[player_team].Model.NPCs.BidderPrompt
            game.ReplicatedStorage.Packages.Knit.Services.TycoonService.RF.AcceptBid:InvokeServer(prompt, "1")
        end
    end
end

function autoBuyFunc()
    while wait(1) do
        pads = game:GetService("Workspace").Tycoons[player_team].Model.Buttons:GetChildren()
        for i, v in pairs(pads) do
            if v.Name == "Restocker - Building 1" or v.Name == "Salesman - Building 1" or v.Name == "Restocker - Building 2" or v.Name == "Salesman - Building 2" then
                print("Gem Pad - Will Not Purchase")
            else
                firetouchinterest(humanoidrootpart, v.Pad, 0)
                wait()
                firetouchinterest(humanoidrootpart, v.Pad, 1)
            end
        end
    end
end

function autoAirdropFunc()
    
    local airdrops = game:GetService("Workspace").World.AirDrops
    
    while wait() do
        if airdrops:FindFirstChild("Drops") then
            if airdrops.Drops:FindFirstChild("AirDrop") then
                if not airdrops.Drops.AirDrop:FindFirstChild("Parachute") then
                    firetouchinterest(humanoidrootpart, airdrops.Drops.AirDrop.Base, 0)
                    wait()
                    firetouchinterest(humanoidrootpart, airdrops.Drops.AirDrop.Base, 1)
                end
            end
        end
    end
end

function autoRebirthFunc()
    while wait(5) do
        game.ReplicatedStorage.Packages.Knit.Services.TycoonService.RF.Rebirth:InvokeServer()
    end
end

function antiAFKFunc()
    while wait(60) do
        vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
	    wait(0.5)
	    vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
    end
end

--Define variables
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local Window = OrionLib:MakeWindow({Name = "Car Factory Tycoon", HidePremium = false, SaveConfig = false, ConfigFolder = "ChillingCarFactory", IntroEnabled = false})

--SCRIPT CRUD

local autoCompleteFuncC
local autoRefillFuncC
local autoUpgradeFuncC
local autoSellFuncC
local autoBuyFuncC
local autoAirdropFuncC
local autoRebirthFuncC
local antiAFKFuncC

--Remove shop GUI
if game:GetService("Players")[player.Name].PlayerGui.HUD:FindFirstChild("Shop") then
    game:GetService("Players")[player.Name].PlayerGui.HUD.Shop:Destroy()
end
if game:GetService("Players")[player.Name].PlayerGui.HUD:FindFirstChild("Notification") then
    game:GetService("Players")[player.Name].PlayerGui.HUD.Notification:Destroy()
end

local firstExec = true

--GUI CRUD
local Main = Window:MakeTab({
	Name = "Main",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local Section1 = Main:AddSection({
	Name = "Creator: Chilling"
})

Main:AddToggle({
	Name = "Auto Refill",
	Default = false,
	Callback = function(Value)
	    if firstExec then return end
		if Value then
		    autoRefillFuncC = coroutine.create(autoRefillFunc)
		    success = coroutine.resume(autoRefillFuncC)
		else
		    coroutine.close(autoRefillFuncC)
		end
	end
})

Main:AddToggle({
	Name = "Auto Complete Vehicle",
	Default = false,
	Callback = function(Value)
	    if firstExec then return end
		if Value then
		    autoCompleteFuncC = coroutine.create(autoCompleteFunc)
		    success = coroutine.resume(autoCompleteFuncC)
		else
		    coroutine.close(autoCompleteFuncC)
		end
	end
})

Main:AddToggle({
	Name = "Auto Upgrade Vehicle",
	Default = false,
	Callback = function(Value)
	    if firstExec then return end
		if Value then
		    autoUpgradeFuncC = coroutine.create(autoUpgradeFunc)
		    success = coroutine.resume(autoUpgradeFuncC)
		else
		    coroutine.close(autoUpgradeFuncC)
		end
	end
})

Main:AddToggle({
	Name = "Auto Sell",
	Default = false,
	Callback = function(Value)
	    if firstExec then return end
		if Value then
		    autoSellFuncC = coroutine.create(autoSellFunc)
		    success = coroutine.resume(autoSellFuncC)
		else
		    coroutine.yield(autoSellFuncC)
		end
	end
})

Main:AddToggle({
	Name = "Auto Buy Pads",
	Default = false,
	Callback = function(Value)
	    if firstExec then return end
		if Value then
		    autoBuyFuncC = coroutine.create(autoBuyFunc)
		    success = coroutine.resume(autoBuyFuncC)
		else
		    coroutine.yield(autoBuyFuncC)
		end
	end
})

local Misc = Window:MakeTab({
	Name = "Misc",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local Section1 = Misc:AddSection({
	Name = "Creator: Chilling"
})

Misc:AddToggle({
	Name = "Auto Collect Air Drop",
	Default = false,
	Callback = function(Value)
	    if firstExec then return end
		if Value then
		    autoAirdropFuncC = coroutine.create(autoAirdropFunc)
		    success = coroutine.resume(autoAirdropFuncC)
		else
		    coroutine.yield(autoAirdropFuncC)
		end
	end
})

Misc:AddToggle({
	Name = "Auto Rebirth",
	Default = false,
	Callback = function(Value)
	    if firstExec then return end
		if Value then
		    autoRebirthFuncC = coroutine.create(autoRebirthFunc)
		    success = coroutine.resume(autoRebirthFuncC)
		else
		    coroutine.yield(autoRebirthFuncC)
		end
	end
})

Misc:AddToggle({
	Name = "Anti AFK",
	Default = false,
	Callback = function(Value)
	    if firstExec then return end
		if Value then
		    antiAFKFuncC = coroutine.create(antiAFKFunc)
		    success = coroutine.resume(antiAFKFuncC)
		else
		    coroutine.yield(antiAFKFuncC)
		end
	end
})

firstExec = false
OrionLib:Init()
